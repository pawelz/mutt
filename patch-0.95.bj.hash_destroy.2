--- hash.c~	Sun Apr  2 23:37:07 2000
+++ hash.c	Sun Apr  2 23:38:30 2000
@@ -121,7 +121,7 @@
     {
       *last = ptr->next;
       if (destroy) destroy (ptr->data);
-      FREE (&ptr);
+      free (ptr);
       return;
     }
   }
@@ -137,15 +137,38 @@ void hash_destroy (HASH **ptr, void (*de
   HASH *pptr = *ptr;
   struct hash_elem *elem, *tmp;
 
-  for (i = 0 ; i < pptr->nelem; i++)
+  /* We want to keep the test for the optional destroy argument out
+   * of the loop to get a faster execution. The price we pay is that
+   * we then have to have two versions of the loop.
+   */
+#if 0
+  /* Nobody use the destroy argument at the moment, so the destroy
+   * version of the loop is out-commented until somebody needs it.
+   */
+  if (destroy)
   {
-    for (elem = pptr->table[i]; elem; )
+    for (i = 0 ; i < pptr->nelem; i++)
     {
-      tmp = elem;
-      elem = elem->next;
-      if (destroy)
+      for (elem = pptr->table[i]; elem; )
+      {
+	tmp = elem;
+	elem = elem->next;
 	destroy (tmp->data);
-      safe_free ((void **) &tmp);
+	free (tmp);
+      }
+    }
+  }
+  else
+#endif
+  {
+    for (i = 0 ; i < pptr->nelem; i++)
+    {
+      for (elem = pptr->table[i]; elem; )
+      {
+	tmp = elem;
+	elem = elem->next;
+	free (tmp);
+      }
     }
   }
   safe_free ((void **) &pptr->table);
--- patchlist.c.orig	Sat Sep 19 02:29:51 1998
+++ patchlist.c	Sat Sep 19 02:54:16 1998
@@ -16,6 +16,8 @@
 
 
 
+  printf("Feature patch: hash_destroy         0.95   by Byrial Jensen\n");
+
 
 
   /* DO NOT MODIFY AFTER THIS LINE */
